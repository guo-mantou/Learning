!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APR	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	e	enum:months
AUG	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	e	enum:months
BELL	testcode.h	30;"	d
CHARACTER	testcode.h	27;"	d
COUNTDWO	ch3.h	/^    COUNTDWO = 1, $/;"	e	enum:ch3
DEC	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	e	enum:months
DECIMAL	testcode.h	24;"	d
ERR	testcode.h	9;"	d
FD	testcode.h	4;"	d
FEB	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	e	enum:months
FINDPATTERN	ch4.c	/^    FINDPATTERN = 1,$/;"	e	enum:ch4	file:
HEXADECIMAL	testcode.h	26;"	d
INTEGERDECIMAL	testcode.h	20;"	d
INTEGERHEX	testcode.h	22;"	d
INTEGEROCTAL	testcode.h	21;"	d
ITOA	ch3.h	/^    ITOA, $/;"	e	enum:ch3
JAN	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	e	enum:months
JUL	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	e	enum:months
JUN	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	e	enum:months
MAIN	testcode.h	16;"	d
MAR	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	e	enum:months
MAX	ch3.h	4;"	d
MAX	ch4.h	4;"	d
MAXLEN	testcode.h	5;"	d
MAY	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	e	enum:months
MYATOI	ch3.h	/^    MYATOI, $/;"	e	enum:ch3
NOV	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	e	enum:months
NUMBER	testcode.h	23;"	d
OCT	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	e	enum:months
OCTAL	testcode.h	25;"	d
OK	testcode.h	8;"	d
QUIT	ch3.h	/^    QUIT = 0$/;"	e	enum:ch3
QUIT	ch4.c	/^    QUIT = 0,$/;"	e	enum:ch4	file:
REVERSE	ch3.h	/^    REVERSE, $/;"	e	enum:ch3
SEP	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	e	enum:months
SHELLSORT	ch3.h	/^    SHELLSORT, $/;"	e	enum:ch3
TESTFLOAT	testcode.h	17;"	d
TRIM	ch3.h	/^    TRIM,$/;"	e	enum:ch3
_TESTCODE_H	testcode.h	2;"	d
bell	testcode.c	/^void bell()$/;"	f
binSearchCall	testcode.c	/^void binSearchCall()$/;"	f
binsearch	testcode.c	/^int binsearch(int x, int v[], int n)$/;"	f
ch3	ch3.h	/^enum ch3 {$/;"	g
ch3Call	ch3.c	/^void ch3Call()$/;"	f
ch3PrintMenu	ch3.c	/^void ch3PrintMenu()$/;"	f
ch4	ch4.c	/^enum ch4 {$/;"	g	file:
ch4_call	ch4.c	/^void ch4_call()$/;"	f
countdwo	ch3.c	/^void countdwo()$/;"	f
decreasePartition	quickSort.c	/^int decreasePartition(int a[], int len, int left, int right, int povit)$/;"	f
displayArray	quickSort.c	/^void displayArray(int a[], int n)$/;"	f
dprint	testcode.h	12;"	d
findpattern	ch4.c	/^int findpattern()$/;"	f
formatPrint_1	testcode.c	/^void formatPrint_1(int a[], unsigned n)$/;"	f
formatPrint_2	testcode.c	/^void formatPrint_2(unsigned n)$/;"	f
freeArray	quickSort.c	/^void freeArray(int *p)$/;"	f
getArray	quickSort.c	/^void getArray(int **p, int len)$/;"	f
getbits	testcode.c	/^unsigned getbits(unsigned x, int p, int n)$/;"	f
increasePartition	quickSort.c	/^int increasePartition(int a[], int len, int left, int right, int povit)$/;"	f
itoa	ch3.c	/^void itoa(int n, char s[])$/;"	f
itoaCall	ch3.c	/^void itoaCall()$/;"	f
main	testcode.c	/^int main()$/;"	f
months	testcode.h	/^enum months { JAN = 1, FEB, MAR, APR, MAY, JUN, $/;"	g
myMonths	testcode.h	/^    JUL, AUG, SEP, OCT, NOV, DEC } myMonths;$/;"	v	typeref:enum:months
myStrcat	testcode.c	/^void myStrcat(char s[], char t[])$/;"	f
myStrcmpA	testcode.c	/^int myStrcmpA(char *s, char *t)$/;"	f
myStrcmpP	testcode.c	/^int myStrcmpP(char *s, char *t)$/;"	f
myStrcpy1	testcode.c	/^void myStrcpy1(char *dest, char *sour)$/;"	f
myStrcpy2	testcode.c	/^void myStrcpy2(char *dest, char *sour)$/;"	f
myStrcpy3	testcode.c	/^void myStrcpy3(char *dest, char *sour)$/;"	f
myatoi	ch3.c	/^int myatoi(char *s)$/;"	f
myatoiCall	ch3.c	/^void myatoiCall()$/;"	f
mygetline	ch4.c	/^int mygetline(char s[], int len)$/;"	f
mygetline	testcode.c	/^int mygetline(char s[], int len)$/;"	f
objects	Makefile	/^objects = $(sources:.c=.o)$/;"	m
precedence	testcode.c	/^void precedence()$/;"	f
print	testcode.h	13;"	d
printLine	quickSort.c	/^void printLine(int len)$/;"	f
printPricision	testcode.c	/^void printPricision()$/;"	f
print_array	ch3.c	/^void print_array(int a[], int n)$/;"	f
printinfo	testcode.c	/^void printinfo(int funcname)$/;"	f
quickSort	quickSort.c	/^void quickSort(int a[], int len, int left, int right, bool increasing)$/;"	f
quickSortCall	quickSort.c	/^void quickSortCall()$/;"	f
reverse	ch3.c	/^void reverse(char s[])$/;"	f
reverseCall	ch3.c	/^void reverseCall()$/;"	f
shellsort	ch3.c	/^void shellsort(int v[], int n)$/;"	f
shellsortCall	ch3.c	/^void shellsortCall()$/;"	f
sources	Makefile	/^sources = testcode.c testextern.c quickSort.c\\$/;"	m
squeeze	testcode.c	/^void squeeze(char s[], int c)$/;"	f
strindex	ch4.c	/^int strindex(char s[], char t[])$/;"	f
swap	quickSort.c	/^void swap(int a[], int s1, int s2)$/;"	f
te	testextern.c	/^int te = 99;$/;"	v
testBell	testcode.c	/^void testBell()$/;"	f
testBitwiseOperators	testcode.c	/^void testBitwiseOperators()$/;"	f
testConst	testcode.c	/^void testConst()$/;"	f
testConstant	testcode.c	/^void testConstant()$/;"	f
testConversion	testcode.c	/^void testConversion()$/;"	f
testEnum	testcode.c	/^void testEnum()$/;"	f
testIf	testcode.c	/^void testIf()$/;"	f
testIncrementAndDecrementOperator	testcode.c	/^void testIncrementAndDecrementOperator()$/;"	f
testRandom	testcode.c	/^void testRandom()$/;"	f
testStringConstant	testcode.c	/^int testStringConstant()$/;"	f
testTypeCast	testcode.c	/^int testTypeCast()$/;"	f
testarrayaddr	testcode.c	/^int testarrayaddr()$/;"	f
testdouble	testcode.c	/^int testdouble()$/;"	f
testextern	testcode.c	/^int testextern()$/;"	f
testfloat	testcode.c	/^int testfloat()$/;"	f
testsprintf	testcode.c	/^int testsprintf()$/;"	f
trim	ch3.c	/^int trim(char s[])$/;"	f
trimCall	ch3.c	/^void trimCall()$/;"	f
